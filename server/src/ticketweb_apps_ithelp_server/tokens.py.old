import falcon
import jwt
import json
import re
import time
import os
import gssapi
import base64
import pam
import pyotp
from os.path import expanduser







class BadRequest(Exception):
    def __init__(self,message,status):
       self._message = message
       self.status = status

    def response_body(self):
       result = {
                  'message': self._message
                }
       cause = self.__cause__
       if cause:
          result['exception'] = str(cause)
       return result

    @staticmethod                     # This is like static in java
    def handle(e, req, resp, params): # These paramaters are required even though I'm only using resp and e
        resp.body = json.dumps(e.response_body())
        resp.status = e.status
        resp.content_type = falcon.MEDIA_JSON
    # i believe this function is a static because that allows me to refer to it even
    # when I don't have an object. I am registering the function with add_error_handler
    # and at that time no object is relevant


class BadRequestHeaderTooBig(BadRequest):
    def __init__(self):
         message = "'Authorization' header is too big"
         status = falcon.HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE
         super().__init__(message,status)

class BadRequestHeaderBadFormatTGT(BadRequest):
    def __init__(self):
         message = "'Authorization' header does not have format, 'Bearer <jwt token>'"
         status = falcon.HTTP_BAD_REQUEST
         super().__init__(message,status)

class BadRequestHeaderBadFormatUserId(BadRequest):
    def __init__(self):
        message = "'UserId' header does not have correct format."
        status = falcon.HTTP_BAD_REQUEST
        super().__init__(message,status)


class BadRequestHeaderBadFormatOTP(BadRequest):
    def __init__(self):
        message = "'OTP' header does not have correct format."
        status = falcon.HTTP_BAD_REQUEST
        super().__init__(message,status)



class BadRequestHeaderBadFormatGSSAPI(BadRequest):
    def __init__(self):
         message = "'Authorization' header does not have format, 'Negotiate <token encoding>'"
         status = falcon.HTTP_BAD_REQUEST
         super().__init__(message,status)


class BadRequestExpiredToken(BadRequest):
    def __init__(self):
         message = "Token has expired."
         status = falcon.HTTP_UNAUTHORIZED # really means "unathenticated" in HTTP-speak
         super().__init__(message,status)

class BadRequestUnrecognizedMinion(BadRequest):
    def __init__(self,minion_id):
         message_fmt = "Unrecognized minion, {0}."
         message = message_fmt.format(minion_id)
         status = falcon.HTTP_UNAUTHORIZED # really means "unathenticated" in HTTP-speak
         super().__init__(message,status)

class BadRequestInvalidJWT_Token(BadRequest):
    def __init__(self):
         message = "Token is not valid."
         status = falcon.HTTP_BAD_REQUEST 
         super().__init__(message,status)

class BadRequestInvalidGSS_Token(BadRequest):
    def __init__(self):
         message = "GSS token is not valid."
         status = falcon.HTTP_BAD_REQUEST
         super().__init__(message,status)




class BadRequestRoleNotString(BadRequest):
    def __init__(self):
         message = "'role' field field in token payload is not a string."
         status = falcon.HTTP_BAD_REQUEST
         super().__init__(message,status)


class BadRequestContextNotString(BadRequest):
    def __init__(self):
         message = "'context' field field in token payload is not a string."
         status = falcon.HTTP_BAD_REQUEST
         super().__init__(message,status)


class BadRequestBadRoleName(BadRequest):
    def __init__(self):
         message =  "'role' field in token payload does not match pattern <computer_account_name>$@queensu.ca."
         status = falcon.HTTP_BAD_REQUEST
         super().__init__(message,status)

class BadRequestMissingHeader(BadRequest):
     def __init__(self,header):
          message = "'{0}' header is missing from the request.".format(header)
          status = falcon.HTTP_BAD_REQUEST
          super().__init__(message,status)

class BadRequestUnsupportedMechanism(BadRequest):
     def __init__(self):
          message = "GSSAPI Error: Unsupported mechanism requested."
          status = falcon.HTTP_BAD_REQUEST
          super().__init__(message,status)

class BadRequestBadQueryString(BadRequest):
     def __init__(self):
          message = "Unsupported query string for this route."
          status = falcon.HTTP_BAD_REQUEST
          super().__init__(message,status)

class BadRequestContextMismatch(BadRequest):
    def __init__(self):
        message = "Mismatching contexts."
        status = falcon.HTTP_BAD_REQUEST
        super().__init__(message,status)


class BadRequestPamAuthFail(BadRequest):
    def __init__(self):
        message = "PAM authentication fail."
        status = falcon.HTTP_UNAUTHORIZED
        # really means unauthenticated in HTTP-speak.
        super().__init__(message,status)


class BadRequestSecretFileIOFail(BadRequest):
    def __init__(self):
        message = "Could not open OTP secret file for user."
        status = falcon.HTTP_INTERNAL_SERVER_ERROR
        super().__init__(message,status)


class BadRequestInvalidOTP(BadRequest):
    def __init__(self):
        message = "Invalid OTP code."
        status = falcon.HTTP_UNAUTHORIZED
        # really means unauthenticated in HTTP-speak.
        super().__init__(message,status)







def _get_jwt_data(req):
     jwt_secret_path = "/etc/inventory_api_tgt_jwt_secret"
     f = open(jwt_secret_path,"r")
     jwt_tgt_secret = f.read().rstrip('\n')
     f.close()
     req_auth_hdr = req.get_header('Authorization')
     if not req_auth_hdr:
         raise BadRequestMissingHeader('Authorization')
     if len(req_auth_hdr) > 256:
         raise BadRequestHeaderTooBig()
     re_pattern = r"^Bearer [-a-zA-Z0-9._]+$"
     if not re.search(re_pattern,req_auth_hdr):
         raise BadRequestHeaderBadFormat()
     req_token = req_auth_hdr[len("Bearer "):]
     try:
        req_decoded = jwt.decode(
                req_token,jwt_tgt_secret,
                algorithms=['HS256'],
                options={"require": ["role","exp","context"]})
     except jwt.exceptions.ExpiredSignatureError as e:
        raise BadRequestExpiredToken()
     except jwt.exceptions.InvalidTokenError as e:
        # note that if the exp part of the claim has expired an exception will be thrown
        # (That test is built in)
        raise BadRequestInvalidJWT_Token() from e
     role = req_decoded['role']
     if not isinstance(role,str):
        raise BadRequestRoleNotString()
     context = req_decoded['context']
     if not isinstance(context,str):
         raise BadRequestContextNotString()
     return req_decoded



def create_response_body_db_access(role):
     jwt_secret_path = "/etc/inventory_api_access_jwt_secret"
     f = open(jwt_secret_path,"r")
     jwt_access_secret = f.read().rstrip('\n')
     f.close()

     exp_time = int(time.time()) + 60 * 15 # 15 minutes from now (probably should be more like five)
     exp_time_english = time.ctime(exp_time)
     jwt_payload = {
         'role': role,
         'exp': exp_time
     }
     headers = {
        'alg': "HS256",
        'typ': "JWT"
     }
     jwt_token = jwt.encode(jwt_payload, jwt_access_secret, algorithm='HS256')


     response_body = {
        # 'access_token': bytes.decode(jwt_token),
        'access_token': jwt_token,
        'expiry_human': exp_time_english
     }
     return response_body



def create_response_body_password_auth(role):
     jwt_secret_path = "/etc/inventory_api_tgt_jwt_secret"
     f = open(jwt_secret_path,"r")
     jwt_access_secret = f.read().rstrip('\n')
     f.close()

     exp_time = int(time.time()) + 60 * 15 # 15 minutes from now (probably should be more like five)
     exp_time_english = time.ctime(exp_time)
     jwt_payload = {
         'role': role,
         'context': "otp",
         'exp': exp_time
     }
     headers = {
        'alg': "HS256",
        'typ': "JWT"
     }
     jwt_token = jwt.encode(jwt_payload, jwt_access_secret, algorithm='HS256')


     response_body = {
        'access_token': bytes.decode(jwt_token),
        'context': 'otp',
        'expiry_human': exp_time_english
     }
     return response_body

def create_response_body_web_session(user_role):
     jwt_secret_path = "/etc/inventory_api_tgt_jwt_secret"
     f = open(jwt_secret_path,"r")
     jwt_access_secret = f.read().rstrip('\n')
     f.close()

     exp_time = int(time.time()) + 60 * 60 * 48 # 2 days from now
     exp_time_english = time.ctime(exp_time)
     jwt_payload = {
         'role': user_role,
         'context': "web-session",
         'exp': exp_time
     }
     headers = {
        'alg': "HS256",
        'typ': "JWT"
     }
     jwt_token = jwt.encode(jwt_payload, jwt_access_secret, algorithm='HS256')


     response_body = {
        'access_token': bytes.decode(jwt_token),
        'context': 'web-session',
        'expiry_human': exp_time_english,
        'role': user_role
     }
     return response_body


def create_response_body_dual_token(user_role):
    return {
            "session-token": create_response_body_web_session(user_role),
            "db-token": create_response_body_db_access(user_role)
        }





class AuthHandler (object):
     def on_get(self,resp):
         resp.content_type = falcon.MEDIA_JSON
         resp.status = falcon.HTTP_OK

def _canonicalise_userid(userid):
    userid_local = userid.lower()
    re_pattern = r"^[0-9a-z]+$"
    if re.search(re_pattern,userid_local):
        return userid_local
    re_pattern = r"^ad(\.queensu.ca){0,1}\\[0-9a-z]+$"
    if re.search(re_pattern,userid_local):
        return userid_local.split("\\")[1]
    re_pattern = r"^[0-9a-z]+@ad\.queensu\.ca$"
    if re.search(re_pattern,userid_local):
        return userid_local.split("@")[0]
     



class AuthHandlerFromBasic (AuthHandler):
    def on_get(self,req,resp):
        userid = req.get_header('UserId')
        if not userid:
            raise BadRequestMissingHeader('UserId')
        if len(userid) > 256:
             raise BadRequestHeaderTooBig()
        re_pattern = r"^[0-9a-z]+$|^ad(\.queensu.ca){0,1}\\[0-9a-z]+$|^[0-9a-z]+@ad\.queensu\.ca$"
        if not re.search(re_pattern,userid,flags=re.IGNORECASE):
             raise BadRequestHeaderBadFormatUserId()
        userid = _canonicalise_userid(userid)
        password = req.get_header('Password')
        if len(password) > 256:
             raise BadRequestHeaderTooBig()
        if not password:
            raise BadRequestMissingHeader('Password')
        if len(password) > 256:
            raise BadRequestHeaderTooBig()
        p = pam.pam()
        if not p.authenticate(userid, password, service='login'):
            raise BadRequestPamAuthFail()
        resp.body=json.dumps(create_response_body_password_auth(userid + '@queensu.ca'))
        super().on_get(resp)



class AuthHandlerFromJWT (AuthHandler):
     # init function will take a string called "context"
     # function
     def __init__(self,jwt_context):
         self.jwt_context = jwt_context

     def get_jwt_data(self,req):
         # This function will also check the context
         # when it is actually available
         # i can also have a table of context strings to patters so i can check the role that way
         # and get rid of the existing check.
         jwt_data = _get_jwt_data(req)
         req_context = jwt_data["context"]
         if req_context != self.jwt_context:
             raise BadRequestContextMismatch()
         return jwt_data



class AuthHandlerFromJWTComputerRole(AuthHandlerFromJWT):

    def __init__(self,jwt_context):
        super().__init__(jwt_context)


    def get_computer_role(self, req):
        jwt_data = self.get_jwt_data(req)
        re_pattern = r"^[A-Z][-_A-Za-z0-9]*\$@queensu\.ca$"
        computer_role = jwt_data["role"]
        if not re.search(re_pattern,computer_role):
           raise BadRequestBadRoleName()

        # I should now extract the minion id from the role
        # and test that an accept file exists (i.e. that it's a valid minion)
        # If I wanted I could also connect to the DB, be sure that the role exists there
        # and that it is a member of computer account and that authorizer is a member of it
        # If I wanted I could also connect to the DB, be sure that the role exists there
        # and that it is a member of computer account and that authorizer is a member of it
        minion_id = computer_role[:computer_role.index("$")]

        key_path = "/etc/salt/pki/master/minions/" + minion_id
        if not os.path.exists(key_path):
            raise BadRequestUnrecognizedMinion(minion_id)
        return computer_role




class AuthHandlerFromJWTUserRole(AuthHandlerFromJWT):

    def __init__(self,jwt_context):
        super().__init__(jwt_context)


    def get_user_role(self, req):
        jwt_data = self.get_jwt_data(req)
        re_pattern = r"^[a-z0-9]+@queensu\.ca$"
        user_role = jwt_data["role"]
        if not re.search(re_pattern,user_role):
           raise BadRequestBadRoleName()

        return user_role




class AuthHandlerMinion(AuthHandlerFromJWTComputerRole):

    def __init__(self):
        super().__init__("minion")



    def on_get(self, req, resp):
        computer_role = self.get_computer_role(req)
        resp.body = json.dumps(create_response_body_db_access(computer_role))
        super().on_get(resp)


class AuthHandlerOTP(AuthHandlerFromJWTUserRole):

    def __init__(self):
        super().__init__("otp")



    def on_get(self, req, resp):
        user_role = self.get_user_role(req)
        otp = req.get_header('OTP')
        if not otp:
            raise BadRequestMissingHeader('OTP')
        if len(otp) > 256:
             raise BadRequestHeaderTooBig()
        re_pattern = r"^[0-9]{6}$"
        if not re.search(re_pattern,otp,flags=re.IGNORECASE):
             raise BadRequestHeaderBadFormatOTP()
        user_id=user_role.split("@")[0]
        path = expanduser("~" + user_id + '/.ssh/.google_authenticator')

        try:
            f = open(path)
        except OSError as e:
            raise BadRequestSecretFileIOFail()
        try:
            secret = f.readline().rstrip()
        finally:
            f.close()
        totp = pyotp.TOTP(secret)
        if not totp.verify(otp):
            raise BadRequestInvalidOTP()
        # At this point,
        # I really should check that the user role exists in the DB and is under the inventory_user role
        # otherwise I'm not really getting maximal benefit from this auth system, Preventing people from 
        # getting authorisation in the first place would be an extra safeguard so i'm not relying so much on DB security.

        resp.body = json.dumps(create_response_body_web_session(user_role))
        super().on_get(resp)



class AuthHandlerWebSession(AuthHandlerFromJWTUserRole):

    def __init__(self):
        super().__init__("web-session")



    def on_get(self, req, resp):
        user_role = self.get_user_role(req)
        user_id=user_role.split("@")[0]

        # At this point,
        # I really should check that the user role exists in the DB and is under the inventory_user role
        # otherwise I'm not really getting maximal benefit from this auth system, Preventing people from 
        # getting authorisation in the first place would be an extra safeguard so i'm not relying so much on DB security.


        resp.body = json.dumps(create_response_body_dual_token(user_role))
        super().on_get(resp)






def _process_gss_api_request(req,resp):
     # Helper function for GSSAPI_Handler
     # this is all dead code for the time being



     req_auth_hdr = req.get_header('Authorization')
     if len(req_auth_hdr) > 4096:
         raise BadRequestHeaderTooBig()
     re_pattern = r"^Negotiate [a-zA-Z0-9+/]+={0,6}?$"
     if not re.search(re_pattern,req_auth_hdr):
         print(req_auth_hdr)
         raise BadRequestHeaderBadFormatGSSAPI()
     in_token = base64.b64decode(req_auth_hdr[len("Negotiate "):])
     service_name = gssapi.Name("host/OURSERGORSALT@AD.QUEENSU.CA")

     server_cred = gssapi.Credentials(name=service_name, usage='accept') # Should usage be 'both' instead?

     ctx = gssapi.SecurityContext(creds=server_cred, usage='accept')

     # Feed the input token to the context, and get an output token in return
     try:
          out_token = ctx.step(in_token)
     except gssapi.raw.exceptions.InvalidTokenError as e:
          raise BadRequestInvalidGSS_Token() from e
     except gssapi.raw.exceptions.BadMechanismError as e:
          raise BadRequestUnsupportedMechanism() from e
     if not ctx.complete:
         # This isn't really an error, This is just part of the flow of the negotiation evens so we'ere not throwing
         # an error
         return (out_token, False, None)
     else:
         return (out_token, True, str(ctx.initiator_name))
     return in_token




class GSSAPI_Handler(object):
    # We are not using this function for now. Remote users cannot use this if they're not connected to AD.
    # It was a ways to make sure that login scripts are user authenticated. They're not really
    # properly authenticated right now. Using our other functions,
    # we still get a per user token but we don't actually authenticate the user.



   def on_get(self, request, response):
     print ("Request made")
     req_auth_hdr = request.get_header('Authorization')
     if req_auth_hdr:
          (out_token,conn_established, user_id) = _process_gss_api_request(request,response)
          if out_token:
              response.set_header('WWW-Authenticate', 'Negotiate ' + bytes.decode(base64.b64encode(out_token)))
          if not conn_established:
              # not an exception. This is just part of the flow of events
              response.status = falcon.HTTP_UNAUTHORIZED
          else:
              resp_body = create_response_body(user_id)
              response.body = resp_body
              response.status = falcon.HTTP_OK
     else:
          # Request GSSAPI / SPNEGO authentication
          response.set_header('WWW-Authenticate','Negotiate')
          response.status = falcon.HTTP_UNAUTHORIZED
              
 


